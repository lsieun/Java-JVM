package lsieun.asm;

/**
 * A {@link FieldVisitor} that generates a corresponding 'field_info' structure, as defined in the
 * Java Virtual Machine Specification (JVMS).
 */
final class FieldWriter extends FieldVisitor {
    /** Where the constants used in this FieldWriter must be stored. */
    private final SymbolTable symbolTable;

    /**
     * The access_flags field of the field_info JVMS structure. This field can contain ASM specific
     * access flags, such as {@link Opcodes#ACC_DEPRECATED}, which are removed when generating the
     * ClassFile structure.
     */
    private final int accessFlags;

    /** The name_index field of the field_info JVMS structure. */
    private final int nameIndex;

    /** The descriptor_index field of the field_info JVMS structure. */
    private final int descriptorIndex;

    // -----------------------------------------------------------------------------------------------
    // Constructor
    // -----------------------------------------------------------------------------------------------

    /**
     * Constructs a new {@link FieldWriter}.
     *
     * @param symbolTable where the constants used in this FieldWriter must be stored.
     * @param access the field's access flags (see {@link Opcodes}).
     * @param name the field's name.
     * @param descriptor the field's descriptor (see {@link Type}).
     * @param signature the field's signature. May be {@literal null}.
     * @param constantValue the field's constant value. May be {@literal null}.
     */
    FieldWriter(
            final SymbolTable symbolTable,
            final int access,
            final String name,
            final String descriptor,
            final String signature,
            final Object constantValue) {
        super(null);
        this.symbolTable = symbolTable;
        this.accessFlags = access;
        this.nameIndex = symbolTable.addConstantUtf8(name);
        this.descriptorIndex = symbolTable.addConstantUtf8(descriptor);
    }

    @Override
    public void visitEnd() {
        // Nothing to do.
    }

    // -----------------------------------------------------------------------------------------------
    // Utility methods
    // -----------------------------------------------------------------------------------------------

    /**
     * Returns the size of the field_info JVMS structure generated by this FieldWriter. Also adds the
     * names of the attributes of this field in the constant pool.
     *
     * @return the size in bytes of the field_info JVMS structure.
     */
    int computeFieldInfoSize() {
        // The access_flags, name_index, descriptor_index and attributes_count fields use 8 bytes.
        int size = 8;
        size += Attribute.computeAttributesSize(symbolTable, accessFlags, 0);
        return size;
    }

    /**
     * Puts the content of the field_info JVMS structure generated by this FieldWriter into the given
     * ByteVector.
     *
     * @param output where the field_info structure must be put.
     */
    void putFieldInfo(final ByteVector output) {
        // Put the access_flags, name_index and descriptor_index fields.
        int mask = 0;
        output.putShort(accessFlags & ~mask).putShort(nameIndex).putShort(descriptorIndex);
        // Compute and put the attributes_count field.
        // For ease of reference, we use here the same attribute order as in Section 4.7 of the JVMS.
        int attributesCount = 0;
        output.putShort(attributesCount);
        // Put the field_info attributes.
        // For ease of reference, we use here the same attribute order as in Section 4.7 of the JVMS.
    }
}
